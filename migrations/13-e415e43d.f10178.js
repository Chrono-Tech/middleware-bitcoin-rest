
module.exports.id = '13.e415e43d.f10178';

const _ = require('lodash'),
  config = require('../config');

/**
 * @description flow e415e43d.f10178 update
 * @param done
 */
   

module.exports.up = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.update({'path':'e415e43d.f10178','type':'flows'}, {
    $set: {'path':'e415e43d.f10178','body':[{'id':'b68ffffb.8e49e','type':'catch','z':'e415e43d.f10178','name':'','scope':null,'x':320,'y':640,'wires':[['49075d44.432d44']]},{'id':'5c2fd91f.e496a8','type':'http response','z':'e415e43d.f10178','name':'','statusCode':'','x':777,'y':641,'wires':[]},{'id':'49075d44.432d44','type':'function','z':'e415e43d.f10178','name':'transform','func':'\nlet factories = global.get("factories"); \nlet error = msg.error.message;\ntry {\n    error = JSON.parse(error);\n}catch(e){}\n\nmsg.payload = error && error.code === 11000 ? \nfactories.messages.address.existAddress :\n\nmsg.error.message && msg.error.code ?\nmsg.error :\nfactories.messages.generic.fail;\n   \nreturn msg;','outputs':1,'noerr':0,'x':561,'y':640,'wires':[['5c2fd91f.e496a8']]},{'id':'c1ff735e.f6bd1','type':'http in','z':'e415e43d.f10178','name':'send','url':'/tx/send','method':'post','upload':false,'swaggerDoc':'','x':250,'y':280,'wires':[['a83f15e5.fc4b28']]},{'id':'a83f15e5.fc4b28','type':'async-function','z':'e415e43d.f10178','name':'','func':'const _ = global.get(\'_\');\nconst genericMessages = global.get(\'factories\').messages.generic;\nconst txMessages = global.get(\'factories\').messages.tx;\n\nconst rpc = global.get(\'rpc\');\n\n\n  if (!msg.payload.tx) {\n     throw new Error(genericMessages.notEnoughArgs);\n  }\n\n  let tx = await rpc(\'decoderawtransaction\', [msg.payload.tx]);\n\n  let voutAddresses = _.chain(tx.vout)\n    .map(vout => _.get(vout, \'scriptPubKey.addresses\', []))\n    .flattenDeep()\n    .uniq()\n    .value();\n\n  let inputs = await Promise.mapSeries(tx.vin, async vin => {\n    let tx = await rpc(\'getrawtransaction\', [vin.txid, true]);\n    return tx.vout[vin.vout];\n  }).catch(() => Promise.reject(txMessages.wrongTx));\n\n  let vinAddresses = _.chain(inputs)\n    .map(vout => _.get(vout, \'scriptPubKey.addresses\', []))\n    .flattenDeep()\n    .uniq()\n    .value();\n\n  let addresses = _.chain(voutAddresses)\n    .union(vinAddresses)\n    .flattenDeep()\n    .uniq()\n    .value();\n\n  tx.inputs = inputs;\n  tx.outputs = tx.vout.map(v => ({\n    value: Math.floor(v.value * Math.pow(10, 8)),\n    scriptPubKey: v.scriptPubKey,\n    addresses: v.scriptPubKey.addresses\n  }));\n\n  for (let i = 0; i < tx.inputs.length; i++) {\n    tx.inputs[i] = {\n      addresses: tx.inputs[i].scriptPubKey.addresses,\n      prev_hash: tx.vin[i].txid, //eslint-disable-line\n      script: tx.inputs[i].scriptPubKey,\n      value: Math.floor(tx.inputs[i].value * Math.pow(10, 8)),\n      output_index: tx.vin[i].vout //eslint-disable-line\n    };\n  }\n\n  tx.valueIn = _.chain(tx.inputs)\n    .map(i => i.value)\n    .sum()\n    .value();\n\n  tx.valueOut = _.chain(tx.outputs)\n    .map(i => i.value)\n    .sum()\n    .value();\n\n  tx.fee = tx.valueIn - tx.valueOut;\n  tx = _.omit(tx, [\'vin\', \'vout\', \'blockhash\']);\n\n  let hash = await rpc(\'sendrawtransaction\', [msg.payload.tx]);\n  let memTxs = await rpc(\'getrawmempool\', [true]);\n\n  tx.time = _.get(memTxs, `${hash}.time`, 0);\n  \n  msg.payload = tx;\n  return msg;\n  ','outputs':1,'noerr':12,'x':490,'y':280,'wires':[['c95e3eeb.97f9d']]},{'id':'c95e3eeb.97f9d','type':'http response','z':'e415e43d.f10178','name':'','statusCode':'','x':790,'y':280,'wires':[]},{'id':'9758d2b4.28879','type':'http in','z':'e415e43d.f10178','name':'history','url':'/tx/:addr/history','method':'get','upload':false,'swaggerDoc':'','x':230,'y':380,'wires':[['ca42ccf2.cc3ff']]},{'id':'ca42ccf2.cc3ff','type':'function','z':'e415e43d.f10178','name':'','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\nconst _ = global.get(\'_\');\n\nmsg.address = msg.req.params.addr;\n\n\nconst baseQuery = {\n    model: `${prefix}Block`, \n    request: [\n    {$match: {\n      $or: [\n        {\'txs.inputs.address\':  msg.address},\n        {\'txs.outputs.address\':  msg.address}\n      ]\n        }},\n        \n    {$project:{txs: {\n        $map: {\n            input: \'$txs\',\n            as: \'txs\',\n            in: {\n                blockNumber: \'$number\',\n                blockHash: \'$hash\',\n                timestamp: \'$timestamp\',\n                inputs: \'$$txs.inputs\',\n                outputs: \'$$txs.outputs\',\n                hash: \'$$txs.hash\'\n            }\n        }\n    }}},        \n    {$unwind:\'$txs\'},\n    {$match: {\n      $or: [\n        {\'txs.inputs.address\':  msg.address},\n        {\'txs.outputs.address\':  msg.address}\n      ]\n        }},\n\n    {$group:{_id: \'a\', txs: { $addToSet:\'$txs\'}}},\n    { $project: {\n        txs: { \n            $slice: _.compact([ "$txs", parseInt(msg.req.query.limit) || 100,  parseInt(msg.req.query.skip) || null ])\n            \n        } \n    } }\n]\n        \n    \n\n}\n\nlet confirmedQuery = _.merge({}, baseQuery);\nlet unconfirmedQuery = _.merge({}, baseQuery);\n\n_.merge(confirmedQuery.request[0].$match, {number: {$gte: 0}});\n_.merge(unconfirmedQuery.request[0].$match, {number: {$eq: -1}});\n\nmsg.payload = [\n    confirmedQuery,\n    unconfirmedQuery\n    ];\n\nreturn msg;','outputs':1,'noerr':0,'x':370,'y':380,'wires':[['21bdf38a.3fc9ec']]},{'id':'e6aea25e.ce0d9','type':'mongo','z':'e415e43d.f10178','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'4','dbAlias':'primary.data','x':650,'y':380,'wires':[['5dd2fd90.38fdf4']]},{'id':'86a9e0c2.636de','type':'http response','z':'e415e43d.f10178','name':'','statusCode':'','x':1130,'y':380,'wires':[]},{'id':'bcfa0a27.cb3308','type':'function','z':'e415e43d.f10178','name':'','func':'const _ = global.get(\'_\');\n\n\nconst arr0 = _.get(msg, \'payload.0.0.txs\', []);\nconst arr1 = _.get(msg, \'payload.1.0.txs\', []);\n\n\n\nmsg.payload = _.find(arr0, {blockNumber: -1}) ? _.union(arr0, arr1) : _.union(arr1, arr0);\n\n\n\nreturn msg;','outputs':1,'noerr':0,'x':970,'y':380,'wires':[['86a9e0c2.636de']]},{'id':'5dd2fd90.38fdf4','type':'join','z':'e415e43d.f10178','name':'','mode':'auto','build':'array','property':'payload','propertyType':'msg','key':'topic','joiner':'\\n','joinerType':'str','accumulate':false,'timeout':'','count':'2','x':810,'y':380,'wires':[['bcfa0a27.cb3308']]},{'id':'21bdf38a.3fc9ec','type':'split','z':'e415e43d.f10178','name':'','splt':'\\n','spltType':'str','arraySplt':1,'arraySpltType':'len','stream':false,'addname':'','x':510,'y':380,'wires':[['e6aea25e.ce0d9']]}]}
  }, {upsert: true}, done);
};

module.exports.down = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.remove({'path':'e415e43d.f10178','type':'flows'}, done);
};
